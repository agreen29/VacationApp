devtools::load_all(".")
library(VacationApp)
fields <- list("precipitation", "temp", "feels_like", "wind_speed", "visibility", "humidity", "sunrise", "sunset")
dates <- date_input("2020-06-13", "2020-06-16")
fields <- list("precipitation", "temp", "feels_like", "wind_speed", "visibility", "humidity", "sunrise", "sunset")
dates <- date_input("2020-06-13", "2020-06-16")
#fields of interest
fields <- list("precipitation", "temp", "feels_like", "wind_speed", "visibility", "humidity", "sunrise", "sunset")
#calculating the number of days
num_days <- day(dates[2]) - day(dates[1]) + 2
#fields of interest
fields <- list("precipitation", "temp", "feels_like", "wind_speed", "visibility", "humidity", "sunrise", "sunset")
#calculating the number of days
#num_days <- day(dates[2]) - day(dates[1]) + 2
make_output(fields = fields, lat_input = 35.2877,lng_input = -120.6673, day_leaving = "2020-06-13", day_returning = "2020-06-16")
#fields of interest
fields <- list("precipitation", "temp", "feels_like", "wind_speed", "visibility", "humidity", "sunrise", "sunset")
#calculating the number of days
#num_days <- day(dates[2]) - day(dates[1]) + 2
make_output(fields = fields, lat_input = 35.2877,lng_input = -120.6673, day_leaving = "2020-06-13", day_returning = "2020-06-16")
knitr::opts_chunk$set(echo = TRUE)
query_weather <- function(fields, lat_input, lng_input, day_leaving, day_returning) {
dates <- date_input(day_leaving, day_returning)
weather <- pmap(list(x = fields),
.f = function(x) {
data.frame(fromJSON(rawToChar(
GET(url = "https://api.climacell.co/v3/weather/forecast/daily",
query= list(
lat = lat_input,
lon = lng_input,
unit_system = "us",
fields = x,
start_time = dates[1],
end_time = dates[2],
apikey = "wuef6wJsQ3A0wwh9IMFsT8unWLjc5wts"))$content)))
})
return (weather)
}
make_output(fields = fields, lat_input = 35.2877,lng_input = -120.6673, day_leaving = "2020-06-13", day_returning = "2020-06-16")
query_weather <- function(fields, lat_input, lng_input, day_leaving, day_returning) {
dates <- date_input(day_leaving, day_returning)
weather <- pmap(list(x = fields),
.f = function(x) {
data.frame(fromJSON(rawToChar(
GET(url = "https://api.climacell.co/v3/weather/forecast/daily",
query= list(
lat = lat_input,
lon = lng_input,
unit_system = "us",
fields = x,
start_time = dates[1],
end_time = dates[2],
apikey = "wuef6wJsQ3A0wwh9IMFsT8unWLjc5wts"))$content)))
})
return (dates)
}
make_output(fields = fields, lat_input = 35.2877,lng_input = -120.6673, day_leaving = "2020-06-13", day_returning = "2020-06-16")
query_weather <- function(fields, lat_input, lng_input, day_leaving, day_returning) {
dates <- date_input(day_leaving, day_returning)
# weather <- pmap(list(x = fields),
#                 .f = function(x) {
#                   data.frame(fromJSON(rawToChar(
#                     GET(url = "https://api.climacell.co/v3/weather/forecast/daily",
#                         query= list(
#                           lat = lat_input,
#                           lon = lng_input,
#                           unit_system = "us",
#                           fields = x,
#                           start_time = dates[1],
#                           end_time = dates[2],
#                           apikey = "wuef6wJsQ3A0wwh9IMFsT8unWLjc5wts"))$content)))
#                 })
return (dates)
}
make_output(fields = fields, lat_input = 35.2877,lng_input = -120.6673, day_leaving = "2020-06-13", day_returning = "2020-06-16")
date_input <- function(day_leaving, day_returning){
start_time <- anydate(day_leaving)
end_time <- anydate(day_returning) + 1
return(c(start_time, end_time))
}
dates <- date_input("2020-06-13", "2020-06-16")
library(anytime)
library(jsonlite)
library(httr)
library(lubridate)
library(purrr)
library(tidyverse)
library(leaflet)
library(datetime)
date_input <- function(day_leaving, day_returning){
start_time <- anydate(day_leaving)
end_time <- anydate(day_returning) + 1
return(c(start_time, end_time))
}
dates <- date_input("2020-06-13", "2020-06-16")
dates[1]
dates[2]
fields <- list("precipitation", "temp", "feels_like", "wind_speed", "visibility", "humidity", "sunrise", "sunset")
num_days <- day(dates[2]) - day(dates[1]) + 1
num_days
query_weather <- function(fields, lat_input, lng_input, day_leaving, day_returning) {
dates <- date_input(day_leaving, day_returning)
# weather <- pmap(list(x = fields),
#                 .f = function(x) {
#                   data.frame(fromJSON(rawToChar(
#                     GET(url = "https://api.climacell.co/v3/weather/forecast/daily",
#                         query= list(
#                           lat = lat_input,
#                           lon = lng_input,
#                           unit_system = "us",
#                           fields = x,
#                           start_time = dates[1],
#                           end_time = dates[2],
#                           apikey = "wuef6wJsQ3A0wwh9IMFsT8unWLjc5wts"))$content)))
#                 })
return (dates)
}
make_output(fields = fields, lat_input = 35.2877,lng_input = -120.6673, day_leaving = "2020-06-13", day_returning = "2020-06-16")
#fields of interest
fields <- list("precipitation", "temp", "feels_like", "wind_speed", "visibility", "humidity", "sunrise", "sunset")
#calculating the number of days
#num_days <- day(dates[2]) - day(dates[1]) + 2
make_output(fields = fields, lat_input = 35.2877,lng_input = -120.6673, day_leaving = "2020-06-13", day_returning = "2020-06-16")
query_weather <- function(fields, lat_input, lng_input, day_leaving, day_returning) {
dates <- date_input("2020-06-13", "2020-06-16")
# weather <- pmap(list(x = fields),
#                 .f = function(x) {
#                   data.frame(fromJSON(rawToChar(
#                     GET(url = "https://api.climacell.co/v3/weather/forecast/daily",
#                         query= list(
#                           lat = lat_input,
#                           lon = lng_input,
#                           unit_system = "us",
#                           fields = x,
#                           start_time = dates[1],
#                           end_time = dates[2],
#                           apikey = "wuef6wJsQ3A0wwh9IMFsT8unWLjc5wts"))$content)))
#                 })
return (dates)
}
make_output(fields = fields, lat_input = 35.2877,lng_input = -120.6673, day_leaving = "2020-06-13", day_returning = "2020-06-16")
dates <- date_input("2020-06-13", "2020-06-16")
dates <- date_input("2020-06-13", "2020-06-16")
dates
dates <- date_input("2020-06-13", "2020-06-16")
dates[1]
query_weather <- function(fields, lat_input, lng_input, day_leaving, day_returning) {
dates <- date_input("2020-06-13", "2020-06-16")
return (dates)
}
make_output(fields = fields, lat_input = 35.2877,lng_input = -120.6673, day_leaving = "2020-06-13", day_returning = "2020-06-16")
query_weather <- function(fields, lat_input, lng_input, day_leaving, day_returning) {
dates <- date_input("2020-06-13", "2020-06-16")
return (dates)
}
query_weather(fields = fields, lat_input = 35.2877,lng_input = -120.6673, day_leaving = "2020-06-13", day_returning = "2020-06-16")
query_weather <- function(fields, lat_input, lng_input, day_leaving, day_returning) {
dates <- date_input("2020-06-13", "2020-06-16")
# weather <- pmap(list(x = fields),
#                 .f = function(x) {
#                   data.frame(fromJSON(rawToChar(
#                     GET(url = "https://api.climacell.co/v3/weather/forecast/daily",
#                         query= list(
#                           lat = lat_input,
#                           lon = lng_input,
#                           unit_system = "us",
#                           fields = x,
#                           start_time = dates[1],
#                           end_time = dates[2],
#                           apikey = "wuef6wJsQ3A0wwh9IMFsT8unWLjc5wts"))$content)))
#                 })
return (dates)
}
query_weather(fields = fields, lat_input = 35.2877,lng_input = -120.6673, day_leaving = "2020-06-13", day_returning = "2020-06-16")
query_weather <- function(fields, lat_input, lng_input, day_leaving, day_returning) {
dates <- date_input("2020-06-13", "2020-06-16")
weather <- pmap(list(x = fields),
.f = function(x) {
data.frame(fromJSON(rawToChar(
GET(url = "https://api.climacell.co/v3/weather/forecast/daily",
query= list(
lat = lat_input,
lon = lng_input,
unit_system = "us",
fields = x,
start_time = dates[1],
end_time = dates[2],
apikey = "wuef6wJsQ3A0wwh9IMFsT8unWLjc5wts"))$content)))
})
return (dates)
}
query_weather(fields = fields, lat_input = 35.2877,lng_input = -120.6673, day_leaving = "2020-06-13", day_returning = "2020-06-16")
query_weather <- function(fields, lat_input, lng_input, day_leaving, day_returning) {
dates <- date_input("2020-06-13", "2020-06-16")
weather <- pmap(list(x = fields),
.f = function(x) {
data.frame(fromJSON(rawToChar(
GET(url = "https://api.climacell.co/v3/weather/forecast/daily",
query= list(
lat = lat_input,
lon = lng_input,
unit_system = "us",
fields = x,
start_time = dates[1],
end_time = dates[2],
apikey = "wuef6wJsQ3A0wwh9IMFsT8unWLjc5wts"))$content)))
})
return (weather)
}
query_weather(fields = fields, lat_input = 35.2877,lng_input = -120.6673, day_leaving = "2020-06-13", day_returning = "2020-06-16")
#fields of interest
fields <- list("precipitation", "temp", "feels_like", "wind_speed", "visibility", "humidity", "sunrise", "sunset")
#calculating the number of days
#num_days <- day(dates[2]) - day(dates[1]) + 2
make_output(fields = fields, lat_input = 35.2877,lng_input = -120.6673, day_leaving = "2020-06-16", day_returning = "2020-06-19")
library(VacationApp)
library(VacationApp)
my_directions <- directions(from = "12 Garden St, Chatham, NJ", to = "275 Lincoln St, San Luis Obispo, CA")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
library(VacationApp)
my_directions <- directions(from = "12 Garden St, Chatham, NJ", to = "275 Lincoln St, San Luis Obispo, CA")
#displaying the data frame
out <- my_directions[[1]]
#displaying Leaflet Map
my_directions[[2]]
